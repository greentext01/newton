import cv2
from pathlib import Path
import numpy as np
import sys

np.set_printoptions(threshold=sys.maxsize)

out_file = Path.cwd() / "flight" / "src" / "graphics" / "icon.rs"

def get_pixels_from_icon(file: Path):
    img = cv2.imread(str(file.absolute()), cv2.IMREAD_UNCHANGED)
    if img.shape[2] == 3:
        img = np.dstack((img, np.full(img.shape[:2], 255, dtype=np.uint8)))

    img = cv2.cvtColor(img, cv2.COLOR_BGRA2RGBA)

    return img.flatten()
    

big = get_pixels_from_icon(Path.cwd() / "flight" / "assets" / "icon_big.png")
medium = get_pixels_from_icon(Path.cwd() / "flight" / "assets" / "icon_medium.png")
small = get_pixels_from_icon(Path.cwd() / "flight" / "assets" / "icon_small.png")

with open(out_file, "w") as f:
    f.write("// Note: macroquad itself does the same thing, so I'd consider this acceptable.\n")
    f.write("// This file is generated by pixels_from_icon.py\n\n")

    f.write(f"pub const ICON_BIG: [u8; {len(big)}] = {np.array2string(big, separator=',')};\n")
    f.write(f"pub const ICON_MEDIUM: [u8; {len(medium)}] = {np.array2string(medium, separator=',')};\n")
    f.write(f"pub const ICON_SMALL: [u8; {len(small)}] = {np.array2string(small, separator=',')};\n")
